"use strict";(self.webpackChunkhot_gate_docs=self.webpackChunkhot_gate_docs||[]).push([[855],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=l(n),f=o,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||a;return n?r.createElement(m,s(s({ref:t},h),{},{components:n})):r.createElement(m,s({ref:t},h))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2110:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return h},default:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:5},c="Normal CC Settlement",l={unversionedId:"Normal_CC_Settlement copy",id:"Normal_CC_Settlement copy",isDocsHomePage:!1,title:"Normal CC Settlement",description:"---",source:"@site/docs/Normal_CC_Settlement copy.md",sourceDirName:".",slug:"/Normal_CC_Settlement copy",permalink:"/whitepaper-docs/Normal_CC_Settlement copy",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"whitepaperSidebar",previous:{title:"Relay",permalink:"/whitepaper-docs/Relay"},next:{title:"Fast CC Settlement",permalink:"/whitepaper-docs/Fast_CC_Settlement"}},h=[{value:"Introduction",id:"introduction",children:[]},{value:"Normal Cross-Chain Transfer",id:"normal-cross-chain-transfer",children:[]},{value:"Normal Cross-Chain Exchange",id:"normal-cross-chain-exchange",children:[]},{value:"Fees",id:"fees",children:[]}],u={toc:h};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"normal-cc-settlement"},"Normal CC Settlement"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},"Suppose that Alice has some amount of token A on the source chain. Alice can make a normal cross-chain settlement request on the source chain to transfer her assets to the target chain, or exchange her assets on the target chain. For her request to be executed on the target chain, the request should first get finalized on the source chain.")),(0,a.kt)("h2",{id:"normal-cross-chain-transfer"},"Normal Cross-Chain Transfer"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"../../img/TeleportDAO_Normal_CC_Transfer.jpg"})),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"To perform a normal cross-chain transfer, Alice sends a lock request that locks her token A on the source chain. This can be done in two ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Programmable Blockchains: if the source chain is programmable, Alice sends her assets to the lock pool smart contract."),(0,a.kt)("li",{parentName:"ul"},"Non-Programmable Blockchains: if the source chain is non-programmable, Alice sends her assets to a multisig wallet address.")),(0,a.kt)("p",null,"In the lock request, Alice determines the request data such as recipient address, teleporter fee, etc. After Alice's request gets finalized on the source chain, a teleporter submits this request on the target chain. The smart contract checks the inclusion of the request on the source chain, then, mints wrapped token A for Alice on the target chain. The smart contract also pays the teleporters fee from the minted tokens. "),(0,a.kt)("p",null,"Furthermore, Alice is able to get back token A on the source chain. For this purpose, she sends an unlock request that burns her wrapped token A on the target chain."))),(0,a.kt)("h2",{id:"normal-cross-chain-exchange"},"Normal Cross-Chain Exchange"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"../../img/TeleportDAO_Normal_CC_Exchange.jpg"})),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"The normal cross-chain exchange process is similar to normal cross-chain transfer, except that in the lock request, Alice determines exchange-related information such as token B address, the minimum amount of token B that she expects to receive, the recipient address, etc. After minting wrapped token A for Alice, her tokens are exchanged for token B using the liquidity pool of token A and token B. Then, token B is sent to the recipient address that was determined by Alice. If exchanging was unsuccessful, the wrapped token A is sent to Alice's recipient's address."))),(0,a.kt)("h2",{id:"fees"},"Fees"),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"The fee that users pay for their cross-chain settlements consists of at most four parts: Teleporter fee, transaction fee, Relayer fee, and exchange fee. Teleporter fee is the reward for the Teleporter who submits the user's request on the target chain. If the cross-chain request is a burn request, Teleporter makes sure that the user receives back her assets on the source chain in a timely manner. Transaction fee is the fee that a user has to pay to be able to send transactions on a blockchain to start an on-chain process. A cross-chain request involves at least two blockchains, so, the user has to pay the transaction fee for both source chain and target chain. Transaction fees are usually paid in a blockchain's native token, so, usually, users have to hold assets on both source and target chains. However, TeleportDAO combines all the fees and requires users to pay a final amount of fee in only one currency and on one blockchain which is much more convenient for them. "),(0,a.kt)("p",null,"Relayer fee is the fee to compensate the relayers who transmit data from the source chain to the target chain. A more detailed explanation of this fee is provided in the Relay section. The last fee to discuss here is the exchange fee. Exchange fee is the amount of fee that a user pays for exchanging assets using the liquidity pools in the case of normal cross-chain exchange. Liquidity providers in TeleportDAO will receive this fee which is a percentage of the exchanged assets."))))}p.isMDXComponent=!0}}]);