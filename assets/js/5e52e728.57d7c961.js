"use strict";(self.webpackChunkhot_gate_docs=self.webpackChunkhot_gate_docs||[]).push([[103],{3905:function(e,t,n){n.d(t,{Zo:function(){return h},kt:function(){return p}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),f=l(n),p=o,d=f["".concat(c,".").concat(p)]||f[p]||u[p]||a;return n?r.createElement(d,s(s({ref:t},h),{},{components:n})):r.createElement(d,s({ref:t},h))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9014:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return h},default:function(){return f}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={sidebar_position:6},c="Fast CC Settlement",l={unversionedId:"Fast_CC_Settlement",id:"Fast_CC_Settlement",isDocsHomePage:!1,title:"Fast CC Settlement",description:"---",source:"@site/docs/Fast_CC_Settlement.md",sourceDirName:".",slug:"/Fast_CC_Settlement",permalink:"/whitepaper-docs/Fast_CC_Settlement",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"whitepaperSidebar",previous:{title:"Normal CC Settlement",permalink:"/whitepaper-docs/Normal_CC_Settlement copy"},next:{title:"Instant CC Settlement",permalink:"/whitepaper-docs/Instant_CC_Settlement"}},h=[{value:"Introduction",id:"introduction",children:[]},{value:"Fast Cross-Chain Transfer",id:"fast-cross-chain-transfer",children:[]},{value:"Fast Cross-Chain Exchange",id:"fast-cross-chain-exchange",children:[]},{value:"Fees",id:"fees",children:[]},{value:"Security",id:"security",children:[]}],u={toc:h};function f(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"fast-cc-settlement"},"Fast CC Settlement"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"Suppose that Alice has some amount of token A on the source chain. Alice can make a fast cross-chain settlement request on the source chain to transfer her assets to the target chain, or exchange her assets on the target chain. For her request to be executed on the target chain, the request should get enough confirmation on the source chain, but it does not need to get finalized. "))),(0,a.kt)("h2",{id:"fast-cross-chain-transfer"},"Fast Cross-Chain Transfer"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"../../img/TeleportDAO_Fast_CC_Transfer.jpg"})),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"To perform a fast cross-chain transfer, Alice sends a lock request that locks her token A on the source chain. In the lock request, Alice determines the request data such as recipient address, teleporter fee, etc. After Alice's request gets enough confirmations on the source chain, a teleporter submits this request on the target chain. The smart contract checks the inclusion of the request on the source chain and gives Alice a wrapped token A as a loan from the fast pool of wrapped token A. After the request gets finalized on the source chain, a teleporter calls the smart contract to mint wrapped token A backed by the locked amount of token A from Alice's request. Then, the minted wrapped token A is automatically sent to the fast pool of token A to pay back the loan."))),(0,a.kt)("h2",{id:"fast-cross-chain-exchange"},"Fast Cross-Chain Exchange"),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"../../img/TeleportDAO_Fast_CC_Exchange.jpg"})),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"The fast cross-chain exchange process is similar to fast cross-chain transfer, except that in the lock request, Alice determines exchange-related information such as token B address, the minimum amount of token B that she expects to receive, the recipient address, etc. After lending wrapped token A to Alice from the fast pool of token A, her tokens are exchanged for token B using the liquidity pool of token A and token B. Then, token B is sent to the recipient address that was determined by Alice. If exchanging was unsuccessful, the loaned wrapped token A is sent to the recipient's address."))),(0,a.kt)("h2",{id:"fees"},"Fees"),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"The fees for fast cross-chain settlements are the same as fees for normal cross-chain settlements, plus an additional fee for its fast feature. This additional fee is called ",(0,a.kt)("strong",{parentName:"p"},"fast fee"),". Fast fee goes to the liquidity providers of the fast pools, who lock their assets to be given as loans to the fast settlement users."))),(0,a.kt)("h2",{id:"security"},"Security"),(0,a.kt)("font",{size:"4"},(0,a.kt)("div",{align:"justify"},(0,a.kt)("p",null,"In TeleportDAO fast settlement mechanism, the smart contract will not wait for the user's transaction to be finalized on the source chain for executing the user's request. Instead, it will get a loan from fast pool liquidity providers on the target chain and execute the request when the transaction receives a fewer number of confirmations. After the user's transaction gets finalized, the wrapped tokens get minted on the target chain. So, no wrapped token gets minted before the smart contract makes sure that it is backed by an equal amount of locked token A on the source chain. "),(0,a.kt)("p",null,"Although this approach makes the cross-chain settlements faster for users and has a completely secure mechanism for wrapping tokens, it introduces some risk for fast pool liquidity providers. After fast pool providers lend their existing wrapped tokens to a user, there is a probability that the user's transaction will not get finalized and get excluded from the longest chain on the source chain. In this case, the corresponding wrapped token will not get minted, therefore, fast pool liquidity providers will not get back their loan. "),(0,a.kt)("p",null,"To mitigate the loss, TeleportDAO has a limit for the value of assets to be transferred or exchanged using a fast cross-chain settlement, named ",(0,a.kt)("strong",{parentName:"p"},"fast limit"),". Also, there is a limitation for the number of fast requests in one block. This way, the amount of loan with no payback will get limited. ",(0,a.kt)("strong",{parentName:"p"},"Fast fee"),", discussed above, is set to be paid to fast pool providers in order to not only compensate for the loans with no payback but also to provide an additional reward for the providers. The probability of a user's transaction not getting finalized decreases by increasing the number of needed confirmations. TeleportDAO calculates this probability and sets ",(0,a.kt)("strong",{parentName:"p"},"fast limit")," and ",(0,a.kt)("strong",{parentName:"p"},"fast fee")," accordingly to properly incentivize fast pool providers."))))}f.isMDXComponent=!0}}]);